@startuml
' @copyright Copyright (c) 2018, Christian Lanegger (lanegger.christian@epfl.ch)
'
' @license zlib license
'
' This file is licensed under the terms of the zlib license.
' See the LICENSE.md file in the root of this repository
' for complete details.

skinparam ClassBackgroundColor #F3EFEB/E1D5E7
skinparam ClassBorderColor     #5F4869
skinparam ClassArrowColor      #5F4869
skinparam NoteBackgroundColor  #F3EFEB
skinparam NoteBorderColor      #5F4869
skinparam NoteFontColor        #5F4869
skinparam PackageFontSize      21
skinparam ClassFontSize        20
skinparam ClassAttributeFontSize 18

package ROSpace_core #F5F5F5{

    package rospace_nodes.propagator #DDEBD8 {

        class PropagatorNode <<  (N,#3F8DCD) >>

        interface Builder {
        }
        class PropagatorBuilder {
        }

        class OrekitPropagator {
            +propagator_num : NumericalPropagator

            +init_jvm()
            +initialize(spc_name : String, prop_settings : Dict, init_coords : Dict, epoch : datetime)
            +propagate(epoch : datetime)

        }
        class NumericalPropagator {
            +state : SpacecraftState
            +propagate(epoch : AbsoluteDate)
        }


        interface AttitudeProvider {
        }
        class AttitudePropagation {

        }

        class StateObserver {
            +state : SpacecraftState
        }
        interface ForceModel {
            +{abstract}addContribution(s : SpacecraftState, adder :)
        }

        interface DisturbanceTorques
        class DisturbanceTorquesArray

    }

    package rospace_lib #DDEBD8 {

        package misc #D5E8E4 {
        class FileDataHandler {
            -_data_checklist : Dict
            -_mg_field_model : GeoMagneticField
            +{static}load_magnetic_field_models(epoch : AbsoluteDate)
            +{static}create_data_validity_checklist()
            +{static}check_data_availability(epoch : datetime)

        }

            abstract Spacecrafts {
                -_last_state : List
                -_propagator : NumericalPropagator
                +build_propagator(init_epoch : datetime)
                +propagate(epoch_now : datetime)
            }
            class Simulator_Spacecraft {
                +build_communication()
                +publish()
            }

        }
        package clock #D5E8E4 {

            class SimTimePublisher {
                -updater : SimTimeUpdater
                -service : SimTimeService
                +set_up_simulation_time()
                +update_simulation_time() : Datetime
            }

        }


    }

    package Rospy #DDEBD8 {

        class Publisher {
            +publish(msg : Message)
        }
        class Subscriber
    }

Spacecrafts <|-- Simulator_Spacecraft
Simulator_Spacecraft --> OrekitPropagator
Publisher <-- Simulator_Spacecraft
Subscriber <-- Simulator_Spacecraft
' Simulator_Spacecraft --> Publisher
' Simulator_Spacecraft --> Subscriber

Simulator_Spacecraft --* PropagatorNode
SimTimePublisher <-- PropagatorNode
PropagatorNode o-- FileDataHandler

OrekitPropagator --> NumericalPropagator
OrekitPropagator o-- PropagatorBuilder

PropagatorBuilder ..|> Builder
PropagatorBuilder --> NumericalPropagator

NumericalPropagator *-right- AttitudePropagation
AttitudePropagation ..|> AttitudeProvider
AttitudePropagation --> DisturbanceTorquesArray
AttitudePropagation *-- StateObserver

DisturbanceTorquesArray ..|> DisturbanceTorques

StateObserver ..|> ForceModel

' OrekitPropagator .[hidden]up. PropagatorNode


@enduml
