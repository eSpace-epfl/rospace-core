<launch>
      <param name="/use_sim_time" value="true" />
     <arg name="scenario" />
	<group ns="scenario">
		<rosparam command="load" file="/home/pantic/cso_ws/eval/orbit_sampling/scenarios_CLOSE/$(arg scenario).scenario" />

	</group>

    <node pkg="rosbag" type="record" name="rosbag_record_diag"
       args="record -a --duration=36000 -O /home/pantic/cso_ws/eval/data/AON_CLOSE/$(arg scenario).bag" required="true"/>

	<group ns="filter_init">
        <rosparam param="R">[1.3538486e-8, 1.3538486e-8]</rosparam> <!-- 24 arcsecs  and 25 mm sigma^2-->
        <rosparam param="P_bias">[2.35044615e-7, 2.35044615e-7]</rosparam> <!-- 100 arcsec -->

        <rosparam param="P_emp">[1e-14, 1e-14, 1e-14]</rosparam>
		<rosparam param="Q">[1e-11, 1e-10, 1e-12, 1e-12, 1e-11, 1e-11]</rosparam>
		<rosparam command="load" file="/home/pantic/cso_ws/eval/orbit_sampling/scenarios_CLOSE/sample_covariance.txt" />
	</group>

    <arg name="epoch" value="20170915T12:20:00" />

    <!-- Launch Epoch Clock without params (=realtime, start from now) -->
    <node pkg="epoch_clock" name="epoch_clock_sim" type="epoch_clock.py" output="screen">
        <param name="realtime_factor" value="120" />
        <param name="frequency" value="5" />
        <param name="init_epoch" value="20170915T12:20:00" />
    </node>

   <!--Launch main propagator-->
    <node pkg="orekit_node" name="orekit_node" type="orekit_node_statevector.py" output="screen">
        <remap from="oe_chaser" to="/cso/oe" />
        <remap from="pose_chaser" to="/cso/pose" />

        <remap from="oe_target" to="/target/oe" />
        <remap from="pose_target" to="/target/pose" />
	
	<remap from="~chaser_init_R" to="/scenario/chaser_state_vect/Rx"/>
	<remap from="~chaser_init_V" to="/scenario/chaser_state_vect/V"/>


	<remap from="~target_init_R" to="/scenario/target_state_vect/Rx"/>
	<remap from="~target_init_V" to="/scenario/target_state_vect/V"/>

	    <param name="oe_epoch" value="$(arg epoch)" />
   </node>


   <group ns="cso">
        <!-- Load Configuration File for sensors etc
        <rosparam command="load" file="$(find cso_gnc_sim)/cfg/cso.yaml" />-->


         <!-- Launch AON Sensor -->
        <node pkg="space_sim_aon" name="node_aon" type="sim_aon_node.py" output="screen">
            <param name="publish_rate" value="0.01" />
            <param name="~sensor/max_range" value="1500" />
            <param name="~sensor/fov_x" value="6.28" />
            <param name="~sensor/fov_y" value="6.28" />

            <param name="~sensor/mu" value="0.000484814 0" />
            <param name="~sensor/sigma" value="0.000116355 0.000116355" />
             <param name="~sensor/position" value="0.0 0.0 0.0" />
                <param name="~sensor/pose" value="0 0 0 1" />


            <remap from="chaser_oe" to="oe" />
            <remap from="target_oe" to="/target/oe" />
        </node>

        <group ns="ore">
          <!-- Launch Filter -->
        <node pkg="cso_gnc_target_estimator" name="target_estimator" type="cso_gnc_target_estimator_node.py" output="screen">
	        <remap from="aon" to="/cso/aon" />
            <remap from="chaser_oe" to="/cso/oe" />
            <remap from="target_oe" to="/target/oe" />

	        <remap from="~R" to="/filter_init/R" />
	        <remap from="~P" to="/filter_init/P" />
            <remap from="~P_bias" to="/filter_init/P_bias" />
            <remap from="~P_emp" to="/filter_init/P_emp" />
    	    <remap from="~x" to="/scenario/roe" />
            <param name="~Q_factor" value="15000" />
            <param name="~enable_bias" value="True" />
            <param name="~enable_emp" value="True" />
            <param name="~augment_range" value="false" />
            <param name="~mode" value="ore" />
        </node>
        </group>


         <group ns="schaub">

        <node pkg="cso_gnc_target_estimator" name="target_estimator" type="cso_gnc_target_estimator_node.py" output="screen">

            <remap from="aon" to="/cso/aon" />
            <remap from="chaser_oe" to="/cso/oe" />
            <remap from="target_oe" to="/target/oe" />

	        <remap from="~R" to="/filter_init/R" />
	        <remap from="~P" to="/filter_init/P" />
            <remap from="~P_bias" to="/filter_init/P_bias" />
            <remap from="~P_emp" to="/filter_init/P_emp" />
    	    <remap from="~x" to="/scenario/roe" />
            <param name="~Q_factor" value="10000" />
            <param name="~enable_bias" value="true" />
            <param name="~enable_emp" value="true" />
            <param name="~augment_range" value="false" />
            <param name="~mode" value="schaub" />
        </node>
        </group>

        <group ns="null">

        <node pkg="cso_gnc_target_estimator" name="target_estimator" type="cso_gnc_target_estimator_node.py" output="screen">
            <remap from="aon" to="/cso/aon" />
            <remap from="chaser_oe" to="/cso/oe" />
            <remap from="target_oe" to="/target/oe" />

	        <remap from="~R" to="/filter_init/R" />
	        <remap from="~P" to="/filter_init/P" />
            <remap from="~P_bias" to="/filter_init/P_bias" />
            <remap from="~P_emp" to="/filter_init/P_emp" />
    	    <remap from="~x" to="/scenario/roe" />
            <param name="~Q_factor" value="10000" />
            <param name="~enable_bias" value="true" />
            <param name="~enable_emp" value="true" />
            <param name="~augment_range" value="false" />
            <param name="~mode" value="null" />
        </node>
        </group>
    </group>



  <group ns="target">


    <!-- Launch REL node -->
    <node name="rel_pub" pkg="rel_node" type="rel_node.py" output="screen" >
        <remap from="target_oe" to="/target/oe" />
        <remap from="chaser_oe" to="/cso/oe" />
    </node>

    </group>


</launch>
